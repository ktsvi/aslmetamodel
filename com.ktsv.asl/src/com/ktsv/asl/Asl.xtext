// automatically generated by Xtext
grammar com.ktsv.asl.Asl with org.eclipse.xtext.common.Terminals

import "http://ASL/1.0" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

ABModel returns ABModel:
	'ABModel'
	'{'
		('modelName' modelName=EString)?
		('description' description=EString)?
		('keywords' keywords=EString)?
		('author' author=EString)?
		('createOn' createOn=EDate)?
		'containsG' containsG=GlobalBlock
		'containsS' '{' containsS+=AgentBlock ( "," containsS+=AgentBlock)* '}' 
		'containsE' '{' containsE+=ExperimentBlock ( "," containsE+=ExperimentBlock)* '}' 
	'}';
	
SpatialEntity returns SpatialEntity:
	SpatialEntity_Impl | Polygon | Line | Point;

Plan returns Plan:
	Plan_Impl | simplePlan | Reflex | ComplexePlan;

GlobalBlock returns GlobalBlock:
	(init?='init')?
	'GlobalBlock'
	'{'
		('id' id=EInt)?
		'containsGl' '{' containsGl+=GlobalVariable ( "," containsGl+=GlobalVariable)* '}' 
		'containsSE' '{' containsSE+=SpatialEntity ( "," containsSE+=SpatialEntity)* '}' 
	'}';

AgentBlock returns AgentBlock:
	(init?='init')?
	(aspectFunction?='aspectFunction')?
	'AgentBlock'
	'{'
		('nameAgent' nameAgent=EString)?
		('aspectName' aspectName=EString)?
		('color' color=EString)?
		'hasP' '{' hasP+=Plan ( "," hasP+=Plan)* '}' 
		'hasPr' '{' hasPr+=Property ( "," hasPr+=Property)* '}' 
	'}';

ExperimentBlock returns ExperimentBlock:
	'ExperimentBlock'
	'{'
		('type' type=EString)?
		('expName' expName=EString)?
		'hasPa' '{' hasPa+=Parameter ( "," hasPa+=Parameter)* '}' 
		'output' '{' output+=Output ( "," output+=Output)* '}' 
	'}';

EString returns ecore::EString:
	STRING | ID;

EDate returns ecore::EDate:
	'EDate' /* TODO: implement this rule and an appropriate IValueConverter */;

GlobalVariable returns GlobalVariable:
	{GlobalVariable}
	(init?='init')?
	'GlobalVariable'
	'{'
		('gvarName' gvarName=EString)?
		('type' type=EString)?
		('initValue' initValue=EString)?
	'}';

SpatialEntity_Impl returns SpatialEntity:
	{SpatialEntity}
	'SpatialEntity'
	'{'
		('shapeName' shapeName=EString)?
		('shapePath' shapePath=EString)?
		('type' type=EString)?
	'}';

EInt returns ecore::EInt:
	'-'? INT;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Polygon returns Polygon:
	{Polygon}
	'Polygon'
	'{'
		('shapeName' shapeName=EString)?
		('shapePath' shapePath=EString)?
		('type' type=EString)?
	'}';

Line returns Line:
	{Line}
	'Line'
	'{'
		('shapeName' shapeName=EString)?
		('shapePath' shapePath=EString)?
		('type' type=EString)?
	'}';

Point returns Point:
	{Point}
	'Point'
	'{'
		('shapeName' shapeName=EString)?
		('shapePath' shapePath=EString)?
		('type' type=EString)?
	'}';

Plan_Impl returns Plan:
	{Plan}
	'Plan'
	'{'
		('planName' planName=EString)?
		('intention' intention=EString)?
	'}';

Property returns Property:
	{Property}
	'Property'
	'{'
		('nameofvariable' nameofvariable=EString)?
		('associateValue' associateValue=EString)?
		('defaultType' defaultType=EString)?
	'}';

simplePlan returns simplePlan:
	{simplePlan}
	'simplePlan'
	'{'
		('planName' planName=EString)?
		('returnType' returnType=EString)?
	'}';

Reflex returns Reflex:
	{Reflex}
	(existReflex?='existReflex')?
	(goal?='goal')?
	'Reflex'
	'{'
		('planName' planName=EString)?
	'}';

ComplexePlan returns ComplexePlan:
	{ComplexePlan}
	'ComplexePlan'
	'{'
		('planName' planName=EString)?
		('returnType' returnType=EString)?
	'}';

Parameter returns Parameter:
	{Parameter}
	'Parameter'
	'{'
		('paramName' paramName=EString)?
		('targetVariable' targetVariable=EString)?
	'}';

Output returns Output:
	'Output'
	'{'
		('id' id=EInt)?
		'hasM' '(' hasM+=[Monitor|EString] ( "," hasM+=[Monitor|EString])* ')' 
		'containsD' '{' containsD+=Display ( "," containsD+=Display)* '}' 
		'hasEF' '{' hasEF+=ExportFile ( "," hasEF+=ExportFile)* '}' 
		'hasI' '{' hasI+=Inspector ( "," hasI+=Inspector)* '}' 
	'}';

Monitor returns Monitor:
	{Monitor}
	'Monitor'
	'{'
		('label' label=EString)?
		('targetVar' targetVar=EString)?
	'}';

Display returns Display:
	{Display}
	'Display'
	'{'
		('displayName' displayName=EString)?
		('displayType' displayType=EString)?
	'}';

ExportFile returns ExportFile:
	{ExportFile}
	'ExportFile'
	'{'
		('fileName' fileName=EString)?
	'}';

Inspector returns Inspector:
	{Inspector}
	'Inspector'
	'{'
		('inspectorName' inspectorName=EString)?
		('AgentValue' AgentValue=EString)?
		('type' type=EString)?
	'}';
