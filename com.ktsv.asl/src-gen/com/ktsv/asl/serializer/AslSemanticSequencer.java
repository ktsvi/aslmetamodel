/*
 * generated by Xtext 2.25.0
 */
package com.ktsv.asl.serializer;

import com.google.inject.Inject;
import com.ktsv.asl.services.AslGrammarAccess;
import eclipse.emf.abmodel.model.abmodel.ABModel;
import eclipse.emf.abmodel.model.abmodel.AbmodelPackage;
import eclipse.emf.abmodel.model.abmodel.AgentBlock;
import eclipse.emf.abmodel.model.abmodel.ComplexePlan;
import eclipse.emf.abmodel.model.abmodel.Display;
import eclipse.emf.abmodel.model.abmodel.ExperimentBlock;
import eclipse.emf.abmodel.model.abmodel.ExportFile;
import eclipse.emf.abmodel.model.abmodel.GlobalBlock;
import eclipse.emf.abmodel.model.abmodel.GlobalVariable;
import eclipse.emf.abmodel.model.abmodel.Inspector;
import eclipse.emf.abmodel.model.abmodel.Line;
import eclipse.emf.abmodel.model.abmodel.Monitor;
import eclipse.emf.abmodel.model.abmodel.Output;
import eclipse.emf.abmodel.model.abmodel.Plan;
import eclipse.emf.abmodel.model.abmodel.Point;
import eclipse.emf.abmodel.model.abmodel.Polygon;
import eclipse.emf.abmodel.model.abmodel.Property;
import eclipse.emf.abmodel.model.abmodel.Reflex;
import eclipse.emf.abmodel.model.abmodel.SpatialEntity;
import eclipse.emf.abmodel.model.abmodel.simplePlan;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class AslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AbmodelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AbmodelPackage.AB_MODEL:
				sequence_ABModel(context, (ABModel) semanticObject); 
				return; 
			case AbmodelPackage.AGENT_BLOCK:
				sequence_AgentBlock(context, (AgentBlock) semanticObject); 
				return; 
			case AbmodelPackage.COMPLEXE_PLAN:
				sequence_ComplexePlan(context, (ComplexePlan) semanticObject); 
				return; 
			case AbmodelPackage.DISPLAY:
				sequence_Display(context, (Display) semanticObject); 
				return; 
			case AbmodelPackage.EXPERIMENT_BLOCK:
				sequence_ExperimentBlock(context, (ExperimentBlock) semanticObject); 
				return; 
			case AbmodelPackage.EXPORT_FILE:
				sequence_ExportFile(context, (ExportFile) semanticObject); 
				return; 
			case AbmodelPackage.GLOBAL_BLOCK:
				sequence_GlobalBlock(context, (GlobalBlock) semanticObject); 
				return; 
			case AbmodelPackage.GLOBAL_VARIABLE:
				sequence_GlobalVariable(context, (GlobalVariable) semanticObject); 
				return; 
			case AbmodelPackage.INSPECTOR:
				sequence_Inspector(context, (Inspector) semanticObject); 
				return; 
			case AbmodelPackage.LINE:
				sequence_Line(context, (Line) semanticObject); 
				return; 
			case AbmodelPackage.MONITOR:
				sequence_Monitor(context, (Monitor) semanticObject); 
				return; 
			case AbmodelPackage.OUTPUT:
				sequence_Output(context, (Output) semanticObject); 
				return; 
			case AbmodelPackage.PARAMETER:
				sequence_Parameter(context, (eclipse.emf.abmodel.model.abmodel.Parameter) semanticObject); 
				return; 
			case AbmodelPackage.PLAN:
				sequence_Plan_Impl(context, (Plan) semanticObject); 
				return; 
			case AbmodelPackage.POINT:
				sequence_Point(context, (Point) semanticObject); 
				return; 
			case AbmodelPackage.POLYGON:
				sequence_Polygon(context, (Polygon) semanticObject); 
				return; 
			case AbmodelPackage.PROPERTY:
				sequence_Property(context, (Property) semanticObject); 
				return; 
			case AbmodelPackage.REFLEX:
				sequence_Reflex(context, (Reflex) semanticObject); 
				return; 
			case AbmodelPackage.SPATIAL_ENTITY:
				sequence_SpatialEntity_Impl(context, (SpatialEntity) semanticObject); 
				return; 
			case AbmodelPackage.SIMPLE_PLAN:
				sequence_simplePlan(context, (simplePlan) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ABModel returns ABModel
	 *
	 * Constraint:
	 *     (
	 *         modelName=EString? 
	 *         description=EString? 
	 *         keywords=EString? 
	 *         author=EString? 
	 *         createOn=EDate? 
	 *         containsG=GlobalBlock 
	 *         containsS+=AgentBlock 
	 *         containsS+=AgentBlock* 
	 *         containsE+=ExperimentBlock 
	 *         containsE+=ExperimentBlock*
	 *     )
	 */
	protected void sequence_ABModel(ISerializationContext context, ABModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AgentBlock returns AgentBlock
	 *
	 * Constraint:
	 *     (
	 *         init?='init'? 
	 *         aspectFunction?='aspectFunction'? 
	 *         nameAgent=EString? 
	 *         aspectName=EString? 
	 *         color=EString? 
	 *         hasP+=Plan 
	 *         hasP+=Plan* 
	 *         hasPr+=Property 
	 *         hasPr+=Property*
	 *     )
	 */
	protected void sequence_AgentBlock(ISerializationContext context, AgentBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Plan returns ComplexePlan
	 *     ComplexePlan returns ComplexePlan
	 *
	 * Constraint:
	 *     (planName=EString? returnType=EString?)
	 */
	protected void sequence_ComplexePlan(ISerializationContext context, ComplexePlan semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Display returns Display
	 *
	 * Constraint:
	 *     (displayName=EString? displayType=EString?)
	 */
	protected void sequence_Display(ISerializationContext context, Display semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExperimentBlock returns ExperimentBlock
	 *
	 * Constraint:
	 *     (
	 *         type=EString? 
	 *         expName=EString? 
	 *         hasPa+=Parameter 
	 *         hasPa+=Parameter* 
	 *         output+=Output 
	 *         output+=Output*
	 *     )
	 */
	protected void sequence_ExperimentBlock(ISerializationContext context, ExperimentBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExportFile returns ExportFile
	 *
	 * Constraint:
	 *     fileName=EString?
	 */
	protected void sequence_ExportFile(ISerializationContext context, ExportFile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GlobalBlock returns GlobalBlock
	 *
	 * Constraint:
	 *     (
	 *         init?='init'? 
	 *         id=EInt? 
	 *         containsGl+=GlobalVariable 
	 *         containsGl+=GlobalVariable* 
	 *         containsSE+=SpatialEntity 
	 *         containsSE+=SpatialEntity*
	 *     )
	 */
	protected void sequence_GlobalBlock(ISerializationContext context, GlobalBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GlobalVariable returns GlobalVariable
	 *
	 * Constraint:
	 *     (init?='init'? gvarName=EString? type=EString? initValue=EString?)
	 */
	protected void sequence_GlobalVariable(ISerializationContext context, GlobalVariable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Inspector returns Inspector
	 *
	 * Constraint:
	 *     (inspectorName=EString? AgentValue=EString? type=EString?)
	 */
	protected void sequence_Inspector(ISerializationContext context, Inspector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SpatialEntity returns Line
	 *     Line returns Line
	 *
	 * Constraint:
	 *     (shapeName=EString? shapePath=EString? type=EString?)
	 */
	protected void sequence_Line(ISerializationContext context, Line semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Monitor returns Monitor
	 *
	 * Constraint:
	 *     (label=EString? targetVar=EString?)
	 */
	protected void sequence_Monitor(ISerializationContext context, Monitor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Output returns Output
	 *
	 * Constraint:
	 *     (
	 *         id=EInt? 
	 *         hasM+=[Monitor|EString] 
	 *         hasM+=[Monitor|EString]* 
	 *         containsD+=Display 
	 *         containsD+=Display* 
	 *         hasEF+=ExportFile 
	 *         hasEF+=ExportFile* 
	 *         hasI+=Inspector 
	 *         hasI+=Inspector*
	 *     )
	 */
	protected void sequence_Output(ISerializationContext context, Output semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (paramName=EString? targetVariable=EString?)
	 */
	protected void sequence_Parameter(ISerializationContext context, eclipse.emf.abmodel.model.abmodel.Parameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Plan returns Plan
	 *     Plan_Impl returns Plan
	 *
	 * Constraint:
	 *     (planName=EString? intention=EString?)
	 */
	protected void sequence_Plan_Impl(ISerializationContext context, Plan semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SpatialEntity returns Point
	 *     Point returns Point
	 *
	 * Constraint:
	 *     (shapeName=EString? shapePath=EString? type=EString?)
	 */
	protected void sequence_Point(ISerializationContext context, Point semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SpatialEntity returns Polygon
	 *     Polygon returns Polygon
	 *
	 * Constraint:
	 *     (shapeName=EString? shapePath=EString? type=EString?)
	 */
	protected void sequence_Polygon(ISerializationContext context, Polygon semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Property returns Property
	 *
	 * Constraint:
	 *     (nameofvariable=EString? associateValue=EString? defaultType=EString?)
	 */
	protected void sequence_Property(ISerializationContext context, Property semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Plan returns Reflex
	 *     Reflex returns Reflex
	 *
	 * Constraint:
	 *     (existReflex?='existReflex'? goal?='goal'? planName=EString?)
	 */
	protected void sequence_Reflex(ISerializationContext context, Reflex semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SpatialEntity returns SpatialEntity
	 *     SpatialEntity_Impl returns SpatialEntity
	 *
	 * Constraint:
	 *     (shapeName=EString? shapePath=EString? type=EString?)
	 */
	protected void sequence_SpatialEntity_Impl(ISerializationContext context, SpatialEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Plan returns simplePlan
	 *     simplePlan returns simplePlan
	 *
	 * Constraint:
	 *     (planName=EString? returnType=EString?)
	 */
	protected void sequence_simplePlan(ISerializationContext context, simplePlan semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
